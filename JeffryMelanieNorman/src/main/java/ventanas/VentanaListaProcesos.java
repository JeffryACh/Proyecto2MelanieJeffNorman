/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ventanas;

import Procesos.Proceso;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 * Ventana que muestra la lista de procesos
 *
 * @author Melanie
 * 
 * VentanaListaProcesos
 */
public class VentanaListaProcesos extends javax.swing.JFrame {
    
    /**
     * Creates new form ListaProcesos
     */
    public VentanaListaProcesos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setLocation(new java.awt.Point(400, 200));

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));

        jScrollPane2.setBackground(new java.awt.Color(0, 51, 51));

        jTable1.setBackground(new java.awt.Color(0, 51, 51));
        jTable1.setFont(new java.awt.Font("Sitka Text", 0, 12)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Tipo de programa", "Fecha", "Hora de ejecucion", "Hora de finalizacion", "Tama√±o", "Duracion", "Usuario", "Estado", "CPU"
            }
        ));
        jTable1.setFillsViewportHeight(true);
        jTable1.setRowSelectionAllowed(false);
        jTable1.setSelectionBackground(new java.awt.Color(0, 51, 51));
        jTable1.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable1.setShowGrid(false);
        jScrollPane2.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Stencil", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Lista de Procesos");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(319, 319, 319)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo que se encarga de asignar un proceso a un CPU
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaListaProcesos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaListaProcesos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaListaProcesos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaListaProcesos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaListaProcesos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * Panel principal de la ventana
     */
    private javax.swing.JLabel jLabel1;
    /**
     * Panel principal que contiene los componentes de la ventana
     */
    private javax.swing.JPanel jPanel1;
    /**
     * ScrollPanel para la tabla de la RAM
     */
    private javax.swing.JScrollPane jScrollPane2;
    /**
     * Tabla que muestra los procesos
     */
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    /**
     * Metodo que se encarga de cargar los datos de los procesos en la tabla
     * @param procesos - Arreglo de procesos
     */
    public void cargarDatos(ArrayList<Proceso> procesos){
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        
        for(int i=0; i<procesos.size(); i++){
            if(procesos.get(i)!=null){
                modelo.setValueAt(String.valueOf(procesos.get(i).getId()),i,0);
                modelo.setValueAt(procesos.get(i).getNombre(),i,1);
                modelo.setValueAt(procesos.get(i).getTipo(),i,2);
                if(procesos.get(i).getFechaDeEjecucion()!=null)
                    modelo.setValueAt(procesos.get(i).getFechaDeEjecucion(),i,3);
                if(procesos.get(i).getHoraDeEjecucion()!=null)
                    modelo.setValueAt(procesos.get(i).getHoraDeEjecucion(),i,4);
                if(procesos.get(i).getHoraDefinalizacion()!=null)
                    modelo.setValueAt(procesos.get(i).getHoraDefinalizacion(), i, 5);
                modelo.setValueAt(String.valueOf(procesos.get(i).getTamano()),i,6);
                modelo.setValueAt(String.valueOf(procesos.get(i).getDuracion()), i, 7);
                modelo.setValueAt(procesos.get(i).getUsuario(), i, 8);
                modelo.setValueAt(procesos.get(i).getEstado(), i, 9);
                modelo.setValueAt(String.valueOf(procesos.get(i).getCPU()),i,10);
            }
        }
    }
    /**
     * Metodo que se encarga de actualizar los datos de los procesos en la tabla
     * @param procesos - Arreglo de procesos
     */
    public void actualizarDatos(ArrayList<Proceso> procesos){
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        
        for(int i=0; i<modelo.getRowCount(); i++){
            if(procesos.get(i-1)!=null){
                
                if(procesos.get(i-1).getFechaDeEjecucion()!=null)
                    modelo.setValueAt(procesos.get(i-1).getFechaDeEjecucion(),i-1,3);
                if(procesos.get(i-1).getHoraDeEjecucion()!=null)
                    modelo.setValueAt(procesos.get(i-1).getHoraDeEjecucion(),i-1,4);
                if(procesos.get(i-1).getHoraDefinalizacion()!=null)
                    modelo.setValueAt(procesos.get(i-1).getHoraDefinalizacion(), i-1, 5);
                
                modelo.setValueAt(procesos.get(i).getEstado(), i, 9);
                modelo.setValueAt(String.valueOf(procesos.get(i).getCPU()),i,10);
            }
        }
    }
}
